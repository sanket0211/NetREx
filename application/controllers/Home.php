<?php
class Home extends CI_Controller {

	public function __construct()
	{
		parent::__construct();
		$this->load->model('Gene');
		$this->load->helper('url');
		$this->load->helper('form');
		$this->load->library('email');
		$this->load->library('session');


		//$this->user = $this->facebook->getUser();
	}   


	public function index()
	{

		$N = 5;
 
          // execute R script from shell
          // this will save a plot at temp.png to the filesystem

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        /*$ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://pathview.uncc.edu/api/analysis');
        curl_setopt ($ch, CURLOPT_POSTFIELDS, "gene_data='gene_info.txt'&secies=osa&gene_id=ENTREZ&pathway_id=03013&suffix=multistatekegg&version=1.0.2");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);


        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);
        print_r($result);
        die();*/
        #$result = shell_exec("curl -F gene_data=@gene_info.txt -F species=osa -F gene_id=ENTREZ -F pathway_id=03013 -F suffix=multistatekegg -F version=1.0.2  https://pathview.uncc.edu/api/analysis");# | sed 's/\\//g' | grep -Ev \"HTTP|Cookie|Server|Cache-Control|Content|Strict-Transport-Security\"", $result);
        #print_r($result);
        #die();

        #echo exec("whoami");
           
		$this->load->view('home');
		$this->load->view('templates/footer');
	}

	public function tutorial()
	{

		$this->load->view('tutorial');
		$this->load->view('templates/footer');
	}
	public function faq()
	{

		$this->load->view('templates/header');
		$this->load->view('faq');
		$this->load->view('templates/footer');
	}
	public function download()
	{

		$this->load->view('download');
		$this->load->view('templates/footer');
	}

	public function contact_us() {
		

		$this->load->view('templates/header');
		$this->load->view('contact-us');
		$this->load->view('templates/footer');
	}

	public function contactusform(){
		$this->load->helper('form');
		$this->load->library('form_validation');
		$this->load->library('session');

		$fullname = $this->input->post('name');
		$email = $this->input->post('email');
		$subject = $this->input->post('subject');
		$message = $this->input->post('message');

		$this->email->from($email,'Rentooz');
		$this->email->to('sanket.shah@research.iiit.ac.in');

		$this->email->subject($subject);
		$email_msg = $message;  
		$this->email->message($email_msg);

		$this->email->send();
		
		
		redirect('contact-us', 'refresh');
	}

	public function browse()
	{
		
		$this->load->view('templates/header');
		$this->load->view('browse');	
		$this->load->view('templates/footer');
	}



	public function module($module_id)
	{
		
		$genes = $this->Gene->getModuleGenes($module_id);
		$genes_new = array();
    $cnt=0;
		foreach($genes as $gene){
      $cnt=$cnt+1;
			array_push($genes_new,$gene->os_id);
       if($cnt>30){
          break;
        }
		}
		$genes=$genes_new;
//		$stress_id= $_POST['stress'];


                $gene_background = $this->Gene->getSpecificGene($genes);
                
                $my_dict = new stdClass();
                
                foreach($gene_background as $gene){
                	$my_dict2 = new stdClass();
                	$my_dict2->os_id=$gene->os_id;
                	//$my_dict2->chromosome_no=$gene->chromosome_no;
                	//$my_dict2->strand=$gene->strand;
                	//$my_dict2->start_position=$gene->start_position;
                	$//my_dict2->end_position=$gene->end_position;
                	$id = $gene->os_id;
                	$my_dict->$id=$my_dict2;
                 
                }
                $my_dict=json_encode($my_dict); 
                $data['gene_background']=$my_dict;

                //print_r($genes);
                $nodes = array();
                $links = array();
                $index=0;$gene_string="";
                foreach($genes as $gene){
                        $my_dict=new stdClass();
                        $module_id=$this->Gene->getModuleId($gene);

                        $gene_info[$gene]=$this->Gene->getModuleName($module_id->module_id);
                        $gene_info[$gene]->kegg=$this->Gene->getKegg($gene);
                        print_r($gene_info[$gene]);
                        die();
                        $tissues[$gene_info[$gene]->module_name]=1;

                        
                        $gene_string=$gene_string.$gene.",";
                }
                
                $response = file_get_contents('http://127.0.0.1:8080/subgraph/'.$gene_string);
                $response = json_decode($response);
                
                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="Query genes colour-coded based on module-membership";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	$my_dict2->classes=$gene_info[$gene]->module_name;
                	array_push($nodes,$my_dict2);
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->correlation_coefficient;
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['modules']=$my_dict;
                
                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="HRR Network";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//$my_dict2->classes=$gene_info[$gene]->module_name;
                	array_push($nodes,$my_dict2);
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->hrr;
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['hrr_network']=$my_dict;


                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="Network view of query genes";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//$my_dict2->classes=$gene_info[$gene]->module_name;
                	array_push($nodes,$my_dict2);
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->correlation_coefficient;
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['general']=$my_dict;


                $data['gene_info']=$gene_info;

                $data['tissue_gene']=$tissue_genes;

                $data['genes']=$genes;
                $this->load->view('templates/header');
                $this->load->view('module_result',$data);                
                $this->load->view('templates/footer');
        

	}

	public function search()
	{
		$data['stresses']=$this->Gene->getAllStress();

		$data['tissues']=$this->Gene->getAllTissues();
		//print_r($data['stresses']->stress_name);
		//$this->load->view('templates/header');
		$this->load->view('search',$data);
		//$this->load->view('templates/footer');
	}

    public function pathway_form()
    {
        $data['stresses']=$this->Gene->getAllStress();

        $data['tissues']=$this->Gene->getAllTissues();

        //print_r($data['stresses']->stress_name);
        //$this->load->view('templates/header');
        $this->load->view('pathway-form',$data);
        //$this->load->view('templates/footer');
    }

	public function validation(){
		$tissue=$this->input->post('tissue');
		$stress=$this->input->post('stress');
		$genes=$this->input->post('disease_set_text');
		$genes=explode(',', $genes);
		$data['genes']=$genes;

      $genes = array_unique($genes);


      $this->search_results($genes);

	}
	public function validate_file_upload(){
		$tissue=$this->input->post('tissue');
		$stress=$this->input->post('stress');
		$target_dir = "uploads/";
		$target_file = $target_dir . basename($_FILES["disease_set"]["name"]);
		$uploadOk = 1;
		$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));
		// Check if image file is a actual image or fake image
		/*if(isset($_POST["submit"])) {
		  $check = getimagesize($_FILES["fileToUpload"]["tmp_name"]);
		  if($check !== false) {
		  echo "File is an image - " . $check["mime"] . ".";
		  $uploadOk = 1;
		  } else {
		  echo "File is not an image.";
		  $uploadOk = 0;
		  }
		  }*/
		// Check if file already exists
		if (file_exists($target_file)) {
			echo "Sorry, file already exists.";
			$uploadOk = 0;
		}
		// Check file size
		if ($_FILES["disease_set"]["size"] > 500000) {
			echo "Sorry, your file is too large.";
			$uploadOk = 0;
		}
		// Allow certain file formats
		if($imageFileType != "csv" && $imageFileType != "txt" && $imageFileType != "jpeg"
				&& $imageFileType != "gif" ) {
			echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
			$uploadOk = 0;
		}
		// Check if $uploadOk is set to 0 by an error
		if ($uploadOk == 0) {
			echo "Sorry, your file was not uploaded.";
			// if everything is ok, try to upload file
		} else {
			if (move_uploaded_file($_FILES["disease_set"]["tmp_name"], $target_file)) {
				#echo "The file ". basename( $_FILES["fileToUpload"]["name"]). " has been uploaded.";
				$myfile = fopen($target_file, "r") or die("Unable to open file!");
				$genes=fread($myfile, filesize($target_file));
				$genes=explode(',', $genes);
				$data['genes']=$genes;
				$i=1;
				while($i<6){
					if($i==1){
						$data['one']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
					}
					else if($i==2){
						$data['three']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
					}
					else if($i==3){
						$data['six']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
					}
					else if($i==4){
						$data['twelve']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
					}
					else if($i==5){
						$data['twentyfour']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
					}
					$i=$i+1;
				}

				$data['tissue']=$tissue;
		  		$data['stress']=$stress;
          $this->search_results($genes,$fc,$pv);
				/*$this->load->view('templates/header');
				$this->load->view('validation',$data);
				$this->load->view('templates/footer');*/

			} else {
				echo "Sorry, there was an error uploading your file.";
			}
		}

	}


    public function pathway_validation(){
        
        $genes=$this->input->post('disease_set_text');
        $genes=explode(',', $genes);
        $data['genes']=$genes;

      $genes = array_unique($genes);

      $this->pathway_fc_form($genes);

    }

    public function pathway_fc_form($genes){
        $data['genes']=$genes;
        $this->load->view('pathway_fc_form',$data);
        
    }

    public function validation_fc_values(){
        $genes=$this->input->post('gene_string');
        $genes = explode (",", $genes);
        $cnt = 1;
        $gene_fc = array();

        foreach($genes as $gene){
            
            $gene_fc[$gene]=$this->input->post($cnt);
            //print_r($this->input->post($gene));
            $cnt+=1;
        }
        $bin_size = $this->input->post('bin-size');
        $limits = $this->input->post('limits');
        $fc_sign = $this->input->post('fc_sign');
        $this->pathway_information($gene_fc,$limits,$bin_size,$fc_sign);
    }

    public function pathway_validate_file_upload(){
        
        $target_dir = "uploads/";
        $target_file = $target_dir . basename($_FILES["disease_set"]["name"]);
        $uploadOk = 1;
        $imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));
        // Check if image file is a actual image or fake image
        /*if(isset($_POST["submit"])) {
          $check = getimagesize($_FILES["fileToUpload"]["tmp_name"]);
          if($check !== false) {
          echo "File is an image - " . $check["mime"] . ".";
          $uploadOk = 1;
          } else {
          echo "File is not an image.";
          $uploadOk = 0;
          }
          }*/
        // Check if file already exists
        if (file_exists($target_file)) {
            echo "Sorry, file already exists.";
            $uploadOk = 0;
        }
        // Check file size
        if ($_FILES["disease_set"]["size"] > 500000) {
            echo "Sorry, your file is too large.";
            $uploadOk = 0;
        }
        // Allow certain file formats
        if($imageFileType != "csv" && $imageFileType != "txt" && $imageFileType != "jpeg"
                && $imageFileType != "gif" ) {
            echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
            $uploadOk = 0;
        }
        // Check if $uploadOk is set to 0 by an error
        if ($uploadOk == 0) {
            echo "Sorry, your file was not uploaded.";
            // if everything is ok, try to upload file
        } else {
            if (move_uploaded_file($_FILES["disease_set"]["tmp_name"], $target_file)) {
                #echo "The file ". basename( $_FILES["fileToUpload"]["name"]). " has been uploaded.";
                $myfile = fopen($target_file, "r") or die("Unable to open file!");
                $genes=fread($myfile, filesize($target_file));
                $genes=explode(',', $genes);
                $data['genes']=$genes;
                $i=1;
                while($i<6){
                    if($i==1){
                        $data['one']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
                    }
                    else if($i==2){
                        $data['three']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
                    }
                    else if($i==3){
                        $data['six']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
                    }
                    else if($i==4){
                        $data['twelve']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
                    }
                    else if($i==5){
                        $data['twentyfour']=$this->Gene->getAllStressGenes($genes,$tissue,$stress,$i);
                    }
                    $i=$i+1;
                }

          $this->pathway_information($genes);
                /*$this->load->view('templates/header');
                $this->load->view('validation',$data);
                $this->load->view('templates/footer');*/

            } else {
                echo "Sorry, there was an error uploading your file.";
            }
        }

    }
	 

   public function gene($gene){

    $data['drought_root_neighbours']=$this->Gene->getDroughtMainRoot($gene, 100);
    $data['cold_root_neighbours']=$this->Gene->getColdMainRoot($gene, 100);
    $data['aba_root_neighbours']=$this->Gene->getABAMainRoot($gene, 100);
    $data['ja_root_neighbours']=$this->Gene->getJAMainRoot($gene, 100);
    $data['osmotic_root_neighbours']=$this->Gene->getOsmoticMainRoot($gene, 100);
    $data['flood_root_neighbours']=$this->Gene->getJAMainRoot($gene, 100);

    //$gene_info[$gene]=$this->Gene->getModuleName($module_id->module_id);
    $data['kegg']=$this->Gene->getKegg($gene);
    $data['rdescription']=$this->Gene->getRootGeneAnnotations($gene,1)->Description;
    $data['sdescription']=$this->Gene->getRootGeneAnnotations($gene,2)->Description;
    $data['rgo']=$this->Gene->getRootGeneAnnotations($gene, 1)->GO;
    $data['sgo']=$this->Gene->getRootGeneAnnotations($gene, 2)->GO;

    $data['gene_id'] = $gene;
    $this->load->view('templates/header');
    $this->load->view('gene',$data);  
    $this->load->view('templates/footer');
  }

  public function pathway($gene_fc_2,$pathway){
    $orig_pathway =  $this->Gene->getPathwayName($pathway)->pathway;
    $gene_fc_2 = explode('_', $gene_fc_2);
    $gene_string = "";
    $genes = array();
    $gene_fc = array();
    $data['orig_pathway']=$orig_pathway;
    foreach($gene_fc_2 as $gene){
    
        $gene = explode('-', $gene);
        array_push($genes, $gene[0]);
        $gene_fc[$gene[0]]=$gene[1];
        $gene_string .= $this->Gene->getNCBIosIds($gene[0])->ncbi_id.'-'.$gene[1].',';
    }

    $gene_string = rtrim($gene_string, ',');
    
    $genes = array_unique($genes);
    $data['genes']=$genes;
    #$ncbi_ids = $this->Gene->getNCBIosIds($genes);
    /*print_r($ncbi_ids);
    die();*/
    $data['gene_fc']=$gene_fc;
    #foreach($ncbi_ids as $ncbi_id){
    #    $gene_string=$gene_string.','.$ncbi_id->ncbi_id;
    #}
    $gene_path_info = $this->Gene->getPathways($genes);
    
    $response = file_get_contents('http://127.0.0.1:8080/pathway_information/'.$gene_string);
    $response = explode("\"",$response);
    $link = $response[3];
    $data['pathway_link']=$link;
    #$cmd = 'wget '.$link;
    #print_r($cmd);
    #exec($cmd);
    #file_put_contents("Tmpfile.zip", fopen($link, 'r'));
    
    $pathway_genes=array();
    foreach($gene_path_info as $gene){
        $pathway = $gene->pathway;
        if($pathway==$orig_pathway){
            $pathway_genes[$pathway]=new stdClass();
            $pathway_genes[$pathway]->os_id="";
            $pathway_genes[$pathway]->os_id2="";
            $pathway_genes[$pathway]->cnt=0;
            $pathway_genes[$pathway]->gene_array=array();
            $pathway_genes[$pathway]->link="";
            $pathway_genes[$pathway]->pathway="";
            $pathway_genes[$pathway]->fc="";
            $pathway_genes[$pathway]->id="";
        }
                
    }
    foreach($gene_path_info as $gene){
            $pathway = $gene->pathway;
            if($pathway==$orig_pathway){
            $pathway_genes[$pathway]->cnt+=1;
            $pathway_genes[$pathway]->pathway=$pathway;
            $pathway_genes[$pathway]->pathway_name=$pathway;
            $pathway_genes[$pathway]->id = $this->Gene->getPathwayId($pathway);
            $pathway_genes[$pathway]->fc=$gene_fc[$gene->os_id];
            $pathway_genes[$pathway]->os_id=$pathway_genes[$pathway]->os_id.' '.$gene->os_id;
            $pathway_genes[$pathway]->os_id2=$pathway_genes[$pathway]->os_id2.$gene->os_id.'-'.$gene_fc[$gene->os_id].',';
            array_push($pathway_genes[$pathway]->gene_array, $gene->os_id);
        }
    }
   /* foreach($gene_path_info as $gene){
        $pathway = $gene->pathway;
        if()
        #$pathway_genes[$pathway]->os_id2=$pathway_genes[$pathway]->os_id2.$gene->os_id.'-'.$gene_fc[$gene->os_id].',';
        $pathway_genes[$pathway]->os_id2 = rtrim($pathway_genes[$pathway]->os_id2,',');
        //print_r($pathway_genes[$pathway]->os_id2);
    }*/
    
    /*foreach ($pathway_genes as $pathway) {
        $ncbi_ids=$this->Gene->getNCBIosIds($pathway->gene_array);
        #print_r($ncbi_ids);
        foreach($ncbi_ids as $ncbi_id){
            $gene_string=$gene_string.','.$ncbi_id->ncbi_id;
        }
        $response = file_get_contents('http://127.0.0.1:8080/pathway_information/'.$gene_string);
        $response = explode("\"",$response);

        $link = $response[3];
        $pathway_genes[$pathway->pathway]->link=$link;
    }*/

    $data['path_gene_info']=$pathway_genes;
    
    $data['gene_path_info']=$gene_path_info;

    $this->load->view('pathway',$data);                
                $this->load->view('templates/footer');
  }

  public function pathway_information($gene_fc,$limits,$bin_size,$fc_sign){
    //$this->form_validation->set_rules('','Email','required');
    #print_r($genes);
    $gene_string="";
    $data['gene_fc']=$gene_fc;
    $genes = array();
    foreach(array_keys($gene_fc) as $gene){
        array_push($genes, $gene);
        if($this->Gene->getNCBIosIds($gene)==NULL){
            continue;
        }

        $gene_string .= $this->Gene->getNCBIosIds($gene)->ncbi_id.'-'.$gene_fc[$gene].',';
    }
    
    $gene_string = rtrim($gene_string, ',');
    
    $genes = array_unique($genes);
    $data['genes']=$genes;
    #$ncbi_ids = $this->Gene->getNCBIosIds($genes);
    /*print_r($ncbi_ids);
    die();*/

    #foreach($ncbi_ids as $ncbi_id){
    #    $gene_string=$gene_string.','.$ncbi_id->ncbi_id;
    #}
    $gene_path_info = $this->Gene->getPathways($genes);
    $response = file_get_contents('http://127.0.0.1:8080/pathway_information/'.$gene_string);
    $response = explode("\"",$response);
    $link = $response[3];
    $data['pathway_link']=$link;
    #$cmd = 'wget '.$link;
    #print_r($cmd);
    #exec($cmd);
    #file_put_contents("Tmpfile.zip", fopen($link, 'r'));
    
    $pathway_genes=array();
    foreach($gene_path_info as $gene){
        $pathway = $gene->pathway;
        $pathway_genes[$pathway]=new stdClass();
        $pathway_genes[$pathway]->os_id="";
        $pathway_genes[$pathway]->os_id2="";
        $pathway_genes[$pathway]->cnt=0;
        $pathway_genes[$pathway]->gene_array=array();
        $pathway_genes[$pathway]->link="";
        $pathway_genes[$pathway]->pathway="";
        $pathway_genes[$pathway]->pathway2="";
        $pathway_genes[$pathway]->fc="";
        $pathway_genes[$pathway]->id="";

                
    }
    $pathway_list = array();
    foreach($gene_path_info as $gene){
        $pathway = $gene->pathway;
        array_push($pathway_list, $pathway);
        #print_r($pathway);
        #$pathway_no_space = preg_replace('/\s+/', '_', $pathway);
        #$pathway_no_space = preg_replace('(', '_', $pathway);
        #$pathway_no_space = preg_replace(')', '_', $pathway);
        $pathway_genes[$pathway]->cnt+=1;
        $pathway_genes[$pathway]->id = $this->Gene->getPathwayId($pathway);
        #print_r($pathway_genes[$pathway]->id);
        $pathway_genes[$pathway]->pathway=$pathway;

        $pathway_genes[$pathway]->pathway_name=$pathway;
        $pathway_genes[$pathway]->fc=$gene_fc[$gene->os_id];
        $pathway_genes[$pathway]->os_id=$pathway_genes[$pathway]->os_id.' '.$gene->os_id;
        $pathway_genes[$pathway]->os_id2=$pathway_genes[$pathway]->os_id2.$gene->os_id.'-'.$gene_fc[$gene->os_id].'_';
        array_push($pathway_genes[$pathway]->gene_array, $gene->os_id);
    }
    
    foreach($pathway_list as $pathway){
        #$pathway_genes[$pathway]->os_id2=$pathway_genes[$pathway]->os_id2.$gene->os_id.'-'.$gene_fc[$gene->os_id].',';
        $pathway_genes[$pathway]->os_id2 = rtrim($pathway_genes[$pathway]->os_id2,'_');

        
        //print_r($pathway_genes[$pathway]->os_id2);
    }
    
    /*foreach ($pathway_genes as $pathway) {
        $ncbi_ids=$this->Gene->getNCBIosIds($pathway->gene_array);
        #print_r($ncbi_ids);
        foreach($ncbi_ids as $ncbi_id){
            $gene_string=$gene_string.','.$ncbi_id->ncbi_id;
        }
        $response = file_get_contents('http://127.0.0.1:8080/pathway_information/'.$gene_string);
        $response = explode("\"",$response);

        $link = $response[3];
        $pathway_genes[$pathway->pathway]->link=$link;
    }*/

    $data['path_gene_info']=$pathway_genes;
    
    $data['gene_path_info']=$gene_path_info;
                $this->load->view('pathway_information',$data);                
                $this->load->view('templates/footer');

}

        public function search_results($genes){
                //$this->form_validation->set_rules('','Email','required');

                $myfile = fopen("heatmap_data.csv", "w");
                $txt = "row_idx\tcol_idx\tlog2ratio\n";
                fwrite($myfile,$txt);
                $myfile2 = fopen("heatmap_pval_data.csv", "w");
                $txt = "row_idx\tcol_idx\tlog2ratio\n";
                fwrite($myfile2,$txt);
                $tissue_id= $_POST['tissue'];
                $stress_id= $_POST['stress'];

                $genes = array_unique($genes);
                $drought_root_network_genes=array();
                $gene_background = $this->Gene->getSpecificGene($genes);


				
                /*$mapped_genes=array();
                $unmapped_genes=array();
                foreach($gene_background as $gene){
                  print_r($gene);
                  die();
                  if(in_array($gene->os_id, $genes)){
                    array_push($mapped_genes,$gene->os_id);
                  }
                  else{
                    array_push($unmapped_genes,$gene->os_id);
                  }
                  
                }
                $genes=$mapped_genes;*/
                
                $module_names = $this->Gene->GetAllModuleNames();

                $data['module_names']=$module_names;
                $gene_neighbours=array();

                $my_dict = new stdClass();
                foreach($gene_background as $gene){
                	$my_dict2 = new stdClass();
                	$my_dict2->os_id=$gene->os_id;
                	//$my_dict2->chromosome_no=$gene->chromosome_no;
                	//$my_dict2->strand=$gene->strand;
                	//$my_dict2->start_position=$gene->start_position;
                	//$my_dict2->end_position=$gene->end_position;
                	$id = $gene->os_id;
                	$my_dict->$id=$my_dict2;
                }
                $my_dict=json_encode($my_dict); 
                $data['gene_background']=$my_dict;
                
                //print_r($genes);
                $nodes = array();
                $links = array();
                $index=0;$gene_string="";
                $final_genes=array();
                $neighbourhood_gene_string="";
                $hcrow=array();
                $hc_count=1;
                $neighbours = array();
                /*foreach($genes as $gene){
                    array_push($neighbours,$this->Gene->getDroughtMainRootRank($gene));
                }*/
                
                foreach($genes as $gene){
                        $my_dict=new stdClass();
                        $module_id=$this->Gene->getModuleId($gene,$tissue_id,$stress_id);
                        
                        if($module_id==NULL){
                            //array_push($final_genes,$gene);
                            $gene_info[$gene]=new stdClass();
                            $gene_info[$gene]->tf=$this->Gene->getTfs($gene);
                            continue;
                        }
                        
                        /*$neighbours = $this->Gene->getDroughtMainRootRank($gene);*/
                        
                        $gene_neighbours[$gene]=array();
                        //print_r($neighbours);
                        //die();

                        /*if(sizeof($neighbours)>0){
                          $index=0;
                        foreach($neighbours as $n){
                          $index = $index + 1;
                          array_push($gene_neighbours[$gene],$n->destination);
                          //print_r($index);
                          if( $n->rank>400){
                            break;
                          }
                          array_push($final_genes, $n->destination);
                          $gene_string=$gene_string.$n->destination.",";
                        
                        $gene_info[$n->destination]=$this->Gene->getModuleName($module_id->module_id);
                        $gene_info[$n->destination]->kegg=$this->Gene->getKegg($n->destination);
                        $gene_info[$n->destination]->description=$this->Gene->getRootGeneAnnotations($n->destination,$tissue_id)->Description;
                        $gene_info[$n->destination]->GO=$this->Gene->getRootGeneAnnotations($n->destination, $tissue_id)->GO;
                        $tissues[$gene_info[$n->destination]->module_name]=1;
                        }
                      }*/
                        $gene_info[$gene]=$this->Gene->getModuleName($module_id->module_id);
                        $gene_info[$gene]->kegg=$this->Gene->getKegg($gene);
                        if($gene_info[$gene]->kegg==""){
                            $gene_info[$gene]->kegg="No Information";
                        }
                        $gene_info[$gene]->tf=$this->Gene->getTfs($gene);
                        if($gene_info[$gene]->tf==""){
                            $gene_info[$gene]->tf="No Information";
                        }
                        $gene_info[$gene]->description=$this->Gene->getRootGeneAnnotations($gene,$tissue_id)->Description;
                        if($gene_info[$gene]->description==""){
                            $gene_info[$gene]->description="No Information";
                        }
                        $gene_info[$gene]->GO=$this->Gene->getRootGeneAnnotations($gene, $tissue_id)->GO;
                        if($gene_info[$gene]->GO==""){
                            $gene_info[$gene]->GO="No Information";
                        }
                        $tissues[$gene_info[$gene]->module_name]=1;
                        #$my_dict=json_encode($my_dict);     $my_dict=new stdClass();
                        $my_dict->id=$gene;
                        $my_dict->cluster=mt_rand(1,5);  
                        $my_dict->firstName=$gene;
                        if($my_dict->cluster==1){
                        	$my_dict->node_type="family";
                        } 
                        if($my_dict->cluster==2){
                        	$my_dict->node_type="coworker";
                        } 
                        if($my_dict->cluster==3){
                        	$my_dict->node_type="classmate";
                        } 
                        if($my_dict->cluster==4){
                        	$my_dict->node_type="friend";
                        } 
                        if($my_dict->cluster==5){
                        	$my_dict->node_type="other";
                        } 
                        array_push($nodes,$my_dict);
                        array_push($final_genes,$gene);
                        $index_mapping[$gene]=$index;
                        $index=$index+1;
                        $gene_string=$gene_string.$gene.",";
                        //$neighbourhood_gene_string=$neighbourhood_gene_string.$gene.",";
                }
                
                $genes = $final_genes;
                if($tissue_id==1){
                  if($stress_id==2){
                    $neighbours = $this->Gene->getDroughtMainRootRank($genes);
                  }
                  if($stress_id==3){
                    $neighbours = $this->Gene->getColdMainRootRank($genes);
                  }
                  if($stress_id==4){
                
                    $neighbours = $this->Gene->getABAMainRootRank($genes);
                  }
                  if($stress_id==5){
                    $neighbours = $this->Gene->getJAMainRootRank($genes);
                  }
                  if($stress_id==6){
                    $neighbours = $this->Gene->getOsmoticMainRootRank($genes);
                  }
                  if($stress_id==7){
                    $neighbours = $this->Gene->getFloodMainRootRank($genes);
                  }
                }
                else{

                  if($stress_id==2){
                    $neighbours = $this->Gene->getDroughtMainShootRank($genes);
                  }
                  if($stress_id==3){
                    $neighbours = $this->Gene->getColdMainShootRank($genes);
                  }
                  if($stress_id==4){
                    $neighbours = $this->Gene->getABAMainShootRank($genes);
                  }
                  if($stress_id==5){
                    $neighbours = $this->Gene->getJAMainShootRank($genes);
                  }
                  if($stress_id==6){
                    $neighbours = $this->Gene->getOsmoticMainShootRank($genes);
                  }
                  if($stress_id==7){
                    $neighbours = $this->Gene->getFloodMainShootRank($genes);
                  }
                }


                
                foreach($neighbours as $n){
                  $index = $index + 1;
                  $module_id=$this->Gene->getModuleId($n->destination,$tissue_id,$stress_id);
                  if($module_id==NULL){
                    $gene_info[$n->destination]=new stdClass();
                    $gene_info[$n->destination]->tf=$this->Gene->getTfs($gene);
                    continue;
                  }
                  array_push($gene_neighbours[$n->source],$n->destination);
                  
                  array_push($final_genes, $n->destination);
                  $gene_string=$gene_string.$n->destination.",";
                    
                    $gene_info[$n->destination]=new stdClass();
                    $gene_info[$n->destination]=$this->Gene->getModuleName($module_id->module_id);
                    
                    
                    $gene_info[$n->destination]->kegg=$this->Gene->getKegg($n->destination);
                    $gene_info[$n->destination]->description=$this->Gene->getRootGeneAnnotations($n->destination,$tissue_id)->Description;
                    $gene_info[$n->destination]->GO=$this->Gene->getRootGeneAnnotations($n->destination, $tissue_id)->GO;
                    $tissues[$gene_info[$n->destination]->module_name]=1;
                }
                $data['hcrow']=$hcrow;
                $data['gene_neighbours']=$gene_neighbours;
                array_unique($final_genes);
                
                if($tissue_id==1){
                  if($stress_id==2){
                    $response = file_get_contents('http://127.0.0.1:8080/subgraph/'.$gene_string);
                    $g_n_f = 'drought_root.txt';
                    
                  }
                  if($stress_id==3){
                    $response = file_get_contents('http://127.0.0.1:8080/Cold_Root/'.$gene_string);
                    $g_n_f = 'cold_root.txt';

                  }
                  if($stress_id==4){
                    $response = file_get_contents('http://127.0.0.1:8080/ABA_Root/'.$gene_string);
                    $g_n_f = 'ABA_root.txt';
                  	
                  }
                  if($stress_id==5){
                    $response = file_get_contents('http://127.0.0.1:8080/JA_Root/'.$gene_string);
                    $g_n_f = 'JA_root.txt';
                  	
                  }
                  if($stress_id==6){
                    $response = file_get_contents('http://127.0.0.1:8080/Osmotic_Root/'.$gene_string);
                    $g_n_f = 'osmotic_root.txt';

                  }
                  if($stress_id==7){
                    $response = file_get_contents('http://127.0.0.1:8080/Flood_Root/'.$gene_string);
                    $g_n_f = 'flood_root.txt';

                  }
                }
                else{

                  if($stress_id==2){
                    
                    $response = file_get_contents('http://127.0.0.1:8080/Drought_Shoot/'.$gene_string);
                    $g_n_f = 'drought_shoot.txt';

                  }
                  if($stress_id==3){
                    $response = file_get_contents('http://127.0.0.1:8080/Cold_Shoot/'.$gene_string);
                    $g_n_f = 'cold_shoot.txt';

                  }
                  if($stress_id==4){
                    $response = file_get_contents('http://127.0.0.1:8080/ABA_Shoot/'.$gene_string);
                    $g_n_f = 'ABA_shoot.txt';

                  }
                  if($stress_id==5){
                    $response = file_get_contents('http://127.0.0.1:8080/JA_Shoot/'.$gene_string);
                    $g_n_f = 'JA_shoot.txt';

                  }
                  if($stress_id==6){
                    $response = file_get_contents('http://127.0.0.1:8080/Osmotic_Shoot/'.$gene_string);
                    $g_n_f = 'osmotic_shoot.txt';

                  }
                  if($stress_id==7){
                    $response = file_get_contents('http://127.0.0.1:8080/Flood_Shoot/'.$gene_string);
                    $g_n_f = 'flood_shoot.txt';

                  }
                }




                if ($fh = fopen($g_n_f, 'r')) {
				    while (!feof($fh)) {
				        $line = fgets($fh);
				        #print_r($line);
				        $line = substr($line, 0,-2);
				        
				        array_push($drought_root_network_genes, $line);
				       
				    }
				    fclose($fh);
				}
				$tfs=array();
				if ($fh = fopen('tfs.txt', 'r')) {
				    while (!feof($fh)) {
				        $line = fgets($fh);
				        $line = substr($line, 0,-1);
				        
				       
				        array_push($tfs, $line);
				       
				    }
				    fclose($fh);
				}
                
                $data['network_genes']=$drought_root_network_genes;
                $response = json_decode($response);
                
                
                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="Query genes colour-coded based on module-membership";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                $linked_genes=array();
                $hashed_links=array();
                $linked_genes_input = array();
                foreach($genes as $gene){
                	if(in_array($gene, $drought_root_network_genes)){
                		array_push($linked_genes, $gene);
                		array_push($linked_genes_input,$gene);
                	}
                }
                
                foreach($response as $link){
                  array_push($linked_genes,$link->source);
                  array_push($linked_genes,$link->destination);
                  if(in_array($link->source, $genes)  and in_array($link->destination, $genes)){
                        array_push($hashed_links, $link->source.'-'.$link->destination);
                        
                        
                        
                    }
                }
                $linked_genes=array_unique($linked_genes);
                $linked_genes_input=array_unique($linked_genes_input);
                $hashed_links = array_unique($hashed_links);
                
                $final_genes=$linked_genes;
                $data['final_genes']=array_unique($final_genes);
                $data['linked_genes_input']=$linked_genes_input;

                
                if($tissue_id==1){
                    $drought_root = $this->Gene->getDroughtRoot($hashed_links);
                    $cold_root = $this->Gene->getColdRoot($hashed_links);
                    $ABA_root = $this->Gene->getABARoot($hashed_links);
                    $JA_root = $this->Gene->getJARoot($hashed_links);
                    $Osmotic_root = $this->Gene->getOsmoticRoot($hashed_links);
                    $Flood_root = $this->Gene->getFloodRoot($hashed_links);

                    $drought_root_dic=new stdClass();
                    if($drought_root!=NULL){
                        foreach($drought_root as $ele){
                          $temp=$ele->hash;
                          $drought_root_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $cold_root_dic=new stdClass();
                    if($cold_root!=NULL){
                        foreach($cold_root as $ele){
                          $temp=$ele->hash;
                          
                          $cold_root_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $ABA_root_dic=new stdClass();
                    if($ABA_root!=NULL){
                        foreach($ABA_root as $ele){
                          $temp=$ele->hash;
                          $ABA_root_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $JA_root_dic=new stdClass();
                    if($JA_root!=NULL){
                        foreach($JA_root as $ele){
                          $temp=$ele->hash;
                          $JA_root_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $Osmotic_root_dic=new stdClass();
                    if($Osmotic_root!=NULL){
                        foreach($Osmotic_root as $ele){
                          $temp=$ele->hash;
                          $Osmotic_root_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $Flood_root_dic=new stdClass();
                    if($Flood_root!=NULL){
                        foreach($Flood_root as $ele){
                          $temp=$ele->hash;
                          $Flood_root_dic->$temp=round($ele->PCC,2);
                        }
                    }
                }
                else{
                    $drought_shoot = $this->Gene->getDroughtShoot($hashed_links);
                    $cold_shoot = $this->Gene->getColdShoot($hashed_links);
                    $ABA_shoot = $this->Gene->getABAShoot($hashed_links);
                    $JA_shoot = $this->Gene->getJAShoot($hashed_links);
                    $Osmotic_shoot = $this->Gene->getOsmoticShoot($hashed_links);
                    $Flood_shoot = $this->Gene->getFloodShoot($hashed_links);

                    $drought_shoot_dic=new stdClass();
                    if($drought_shoot!=NULL){
                        foreach($drought_shoot as $ele){
                          $temp=$ele->hash;
                          $drought_shoot_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $cold_shoot_dic=new stdClass();
                    if($cold_shoot!=NULL){
                        foreach($cold_shoot as $ele){
                          $temp=$ele->hash;
                          
                          $cold_shoot_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $ABA_shoot_dic=new stdClass();
                    if($ABA_shoot!=NULL){
                        foreach($ABA_shoot as $ele){
                          $temp=$ele->hash;
                          $ABA_shoot_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $JA_shoot_dic=new stdClass();
                    if($JA_shoot!=NULL){
                        foreach($JA_shoot as $ele){
                          $temp=$ele->hash;
                          $JA_shoot_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $Osmotic_shoot_dic=new stdClass();
                    if($Osmotic_shoot!=NULL){
                        foreach($Osmotic_shoot as $ele){
                          $temp=$ele->hash;
                          $Osmotic_shoot_dic->$temp=round($ele->PCC,2);
                        }
                    }
                    $Flood_shoot_dic=new stdClass();
                    if($Flood_shoot!=NULL){
                        foreach($Flood_shoot as $ele){
                          $temp=$ele->hash;
                          $Flood_shoot_dic->$temp=round($ele->PCC,2);
                        }
                    }
                }

             
                

                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene,$genes)){
                  	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                      $my_dict=new stdClass();
                  	$my_dict->id=$gene;
                  	$my_dict->name=$gene;
                  	//$my_dict->parent=$gene_info[$gene]->module_name;
                  	$my_dict->parent='cy';
                  	$my_dict2=new stdClass();
                  	$my_dict2->data=$my_dict;
                    $my_dict2->classes=lcfirst($gene_info[$gene]->module_name);
                    if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                  	 //$my_dict2->classes=lcfirst('blue');
                    
                  	array_push($nodes,$my_dict2);
                    $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                $links = array();
                foreach($response as $link){
                  
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
                
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;

                $my_dict=json_encode($my_dict); 
                $data['modules']=$my_dict;

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Top hundred neighbours of query genes ranked by total connectivity in HRR network";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($linked_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  $my_dict2->classes=lcfirst($gene_info[$gene]->module_name);
                  if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $my_dict->name=$link->hrr;
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_modules']=$my_dict;


                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="HRR Network";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene,$genes)){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//$my_dict2->classes=$gene_info[$gene]->module_name;
                	array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->hrr;
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
              }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['hrr_network']=$my_dict;

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Top hundred neighbours of query genes ranked by total connectivity in HRR network";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($linked_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $my_dict->name=$link->hrr;
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_hrr_network']=$my_dict;


                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="HRR Network";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene,$genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name="";
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $my_dict->name=$link->hrr;
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
              }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['no_gene_names']=$my_dict;

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Top hundred neighbours of query genes ranked by total connectivity in HRR network";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($linked_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name="";
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $my_dict->name=$link->hrr;
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_no_names']=$my_dict;

//////////////////////////////////////////////
                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Drought Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene,$genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source. '-'.$link->destination;
                  #print_r($temp);
                  #print_r($drought_root_dic->'Os01g0684900-Os01g0327100');
                  if($tissue_id==1){
                      if(array_key_exists($temp, $drought_root_dic)){
                        $my_dict->name=$drought_root_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  else{
                    if(array_key_exists($temp, $drought_shoot_dic)){
                        $my_dict->name=$drought_shoot_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                  }
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['drought']=$my_dict;

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Drought Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($linked_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source. '-'.$link->destination;
                  #print_r($temp);
                  #print_r($drought_root_dic->'Os01g0684900-Os01g0327100');
                    if($tissue_id==1){   
                      if(array_key_exists($temp, $drought_root_dic)){
                        $my_dict->name=$drought_root_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  else{
                    if(array_key_exists($temp, $drought_shoot_dic)){
                        $my_dict->name=$drought_shoot_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_drought']=$my_dict;


                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Cold Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene,$genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                  if($tissue_id==1){
                      if(array_key_exists($temp, $cold_root_dic)){
                        $my_dict->name=$cold_root_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  else{
                    if(array_key_exists($temp, $cold_shoot_dic)){
                        $my_dict->name=$cold_shoot_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }

                    
                   
                  
                    $my_dict->target=$link->destination;
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    array_push($links,$my_dict2);
                  }
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['cold']=$my_dict;

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Cold Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($linked_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                  if($tissue_id==1){
                      if(array_key_exists($temp, $cold_root_dic)){
                        $my_dict->name=$cold_root_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                    }
                    else{
                        if(array_key_exists($temp, $cold_shoot_dic)){
                        $my_dict->name=$cold_shoot_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                    }                    
                   
                  
                    $my_dict->target=$link->destination;
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    array_push($links,$my_dict2);
                  
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_cold']=$my_dict;


                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="ABA Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene, $genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                  
                  if($tissue_id==1){
                      if(array_key_exists($temp, $ABA_root_dic)){
                        $my_dict->name=$ABA_root_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  else{
                    if(array_key_exists($temp, $ABA_shoot_dic)){
                        $my_dict->name=$ABA_shoot_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
              }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['aba']=$my_dict;

$nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="ABA Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                      if($tissue_id==1){
                      if(array_key_exists($temp, $ABA_root_dic)){
                        $my_dict->name=$ABA_root_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  else{
                    if(array_key_exists($temp, $ABA_shoot_dic)){
                    $my_dict->name=$ABA_shoot_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_aba']=$my_dict;

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="JA Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }

                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene, $genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                    if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                    if($tissue_id==1){
                      if(array_key_exists($temp, $JA_root_dic)){
                        $my_dict->name=$JA_root_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                  else{
                        if(array_key_exists($temp, $JA_shoot_dic)){
                        $my_dict->name=$JA_shoot_dic->$temp;
                      }
                      else{
                        $my_dict->name="NA";
                      }
                  }
                
     
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
              }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['ja']=$my_dict;


                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="JA Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($linked_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                  if($tissue_id==1){
                  if(array_key_exists($temp, $JA_root_dic)){
                    $my_dict->name=$JA_root_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }
              }
              else{

                if(array_key_exists($temp, $JA_shoot_dic)){
                    $my_dict->name=$JA_shoot_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }
              }
     
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_ja']=$my_dict;

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Osmotic Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene, $genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                  if($tissue_id==1){
                  if(array_key_exists($temp, $Osmotic_root_dic)){
                    $my_dict->name=$Osmotic_root_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }
              }
              else{
                if(array_key_exists($temp, $Osmotic_shoot_dic)){
                    $my_dict->name=$Osmotic_shoot_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }
              }
                  
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
              }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['osmotic']=$my_dict;


                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Osmotic Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($linked_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                if($tissue_id==1){
                  if(array_key_exists($temp, $Osmotic_root_dic)){
                    $my_dict->name=$Osmotic_root_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }
              }
              else{
                if(array_key_exists($temp, $Osmotic_shoot_dic)){
                    $my_dict->name=$Osmotic_shoot_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }

              }
                  
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_osmotic']=$my_dict;

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Flood Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene, $genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                  if($tissue_id==1){
                  if(array_key_exists($temp, $Flood_root_dic)){
                    $my_dict->name=$Flood_root_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }
              }
              else{
                if(array_key_exists($temp, $Flood_shoot_dic)){
                    $my_dict->name=$Flood_shoot_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }
              }
                  
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
              }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['flood']=$my_dict;

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Flood Specific PCC";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($linked_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }

                //$main=new stdClass();
                $links = array();
                foreach($response as $link){

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp = $link->source . '-'.$link->destination;
                  if($tissue_id==1){
                  if(array_key_exists($temp, $Flood_root_dic)){
                    $my_dict->name=$Flood_root_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }
              }
              else{
                if(array_key_exists($temp, $Flood_shoot_dic)){
                    $my_dict->name=$Flood_shoot_dic->$temp;
                  }
                  else{
                    $my_dict->name="NA";
                  }
              }
                  
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_flood']=$my_dict;

/////////////////////////////////////////////////////

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="Network view of query genes";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes) and in_array($gene, $genes)){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	if(in_array($gene, $tfs)){
                		$my_dict2->classes='tfs';
                	}
                	//$my_dict2->classes=$gene_info[$gene]->module_name;
                	array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
              }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['general']=$my_dict;


                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name="Top hundred neighbours of query genes ranked by total connectivity in HRR network";
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                  $my_dict=new stdClass();
                  $tissue_genes[$tissue]=array();
                  $my_dict->id=$tissue;
                  $my_dict->name=$tissue;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  //array_push($nodes,$my_dict2);
                }
                
                foreach($linked_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                  array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  if( in_array($gene, $genes)){
                    $my_dict2->classes="inside";
                  }
                  else{
                    $my_dict2->classes="outside";
                  }
                  if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                  //$my_dict2->classes=$gene_info[$gene]->module_name;
                  array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                  $my_dict->target=$link->destination;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                $data['neighbour_general']=$my_dict;
                
                //$data['one']=$this->Gene->getAllStressGenesDup($genes,$tissue_id,$stress_id,1);
                
                $fc_pv_data=array();
                $fc_gene=array();
                $pv_gene=array();
                $heat_map_data = array();
                $gene_cnt=1;
				foreach($genes as $gene){
		               		
                      
                  	$temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,1);               	
                    $fc_gene[$gene]=$temp->fold_change;                        
                  	$pv_gene[$gene]=$temp->p_value;                      	
                    $gene_info[$gene]->one_fc=$temp->fold_change;           
                    $gene_info[$gene]->one_pv=$temp->p_value;   
                    $hm_temp=new stdClass();
                    $hm_temp->variable="one hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ;   
                    
                    if(in_array($gene, $linked_genes_input)){
                        $txt = "1\t".$gene_cnt."\t".$temp->fold_change."\n";
                    fwrite($myfile,$txt);
                    array_push($hcrow,$hc_count);
                        $hc_count=$hc_count+1;
                    }
                    if(in_array($gene, $linked_genes_input)){
                    $txt = "1\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);
                    $gene_cnt=$gene_cnt+1;  
                    }
                    
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='one';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='one';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);
                    
                }
                $data['hcrow']=$hcrow;
                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="Network view of query genes at 1hr time-point. Node color based on 2 fold-change";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                /*print_r($hcrow);
                print_r($linked_genes_input);
                die();*/
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes)){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	$fc=$fc_gene[$gene];
                  $pv=$pv_gene[$gene];
                  $my_dict2->classes="";
                	if($fc>1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='upregulated';
                	}
                	else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='downregulated';
                	}
                	if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                	/*else{
                		$my_dict2->classes="neutral";
                	}*/
                	array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
                }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['one_hr']=$my_dict;


                $fc_pv_data=array();
                $fc_gene=array();
                $pv_gene=array();
                $heat_map_data = array();
                $gene_cnt=1;
                foreach($final_genes as $gene){
                            
                      
                    $temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,1);                
                    $fc_gene[$gene]=$temp->fold_change;                        
                    $pv_gene[$gene]=$temp->p_value;                         
                    $gene_info[$gene]->one_fc=$temp->fold_change;           
                    $gene_info[$gene]->one_pv=$temp->p_value;   
                    $hm_temp=new stdClass();
                    $hm_temp->variable="one hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ;   
                    /*$txt = "1\t".$gene_cnt."\t".$temp->fold_change."\n";
                    fwrite($myfile,$txt);
                    $txt = "1\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);*/
                    $gene_cnt=$gene_cnt+1;  
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='one';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='one';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);
                    
                }
                
                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
                $my_dict->name="Network view of query genes at 1hr time-point. Node color based on 2 fold-change";
                $my_dict2=new stdClass();
                $my_dict2->data=$my_dict;
                array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                    $my_dict=new stdClass();
                    $tissue_genes[$tissue]=array();
                    $my_dict->id=$tissue;
                    $my_dict->name=$tissue;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    //array_push($nodes,$my_dict2);
                }
                
                foreach($final_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                    array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                    $my_dict->id=$gene;
                    $my_dict->name=$gene;
                    //$my_dict->parent=$gene_info[$gene]->module_name;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    $fc=$fc_gene[$gene];
                  $pv=$pv_gene[$gene];
                  $my_dict2->classes="";
                    if($fc>1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='upregulated';
                    }
                    else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='downregulated';
                    }
                    if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                    /*else{
                        $my_dict2->classes="neutral";
                    }*/
                    array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                  
                    $my_dict=new stdClass();
                    $my_dict->source=$link->source;
                    $my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                    $my_dict->target=$link->destination;
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    array_push($links,$my_dict2);
                
                }
                
                $my_dict=new stdClass();
                $my_dict->nodes = $nodes;
                $my_dict->edges=$links;
                
                $my_dict=json_encode($my_dict); 
                $data['neighbour_one_hr']=$my_dict;


                //$data['three']=$this->Gene->getAllStressGenesDup($genes,$tissue_id,$stress_id,2);
                //$fc_pv_data=array();
                $fc_gene=array();  
                $pv_gene=array();  
                $gene_cnt=1;
				foreach($genes as $gene){
		               		
                   
                      
                    $temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,2);                
                    $fc_gene[$gene]=$temp->fold_change;                        
                    $pv_gene[$gene]=$temp->p_value;  
                    $gene_info[$gene]->three_fc=$temp->fold_change;           
                    $gene_info[$gene]->three_pv=$temp->p_value; 
                    $hm_temp=new stdClass();
                    $hm_temp->variable="Three hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ;
                    if(in_array($gene, $linked_genes_input)){
                    $txt = "2\t".$gene_cnt."\t".$temp->fold_change."\n";

                    fwrite($myfile,$txt);
                    }
                    if(in_array($gene, $linked_genes_input)){
                    $txt = "2\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);
                    $gene_cnt=$gene_cnt+1;
                    }
                    
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='two';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='two';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);                     
                
                }

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="Network view of query genes at 3hr time-point. Node color based on 2 fold-change";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes)){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                  $fc=$fc_gene[$gene];
                	$pv=$pv_gene[$gene];
                  $my_dict2->classes="";

                	if($fc>1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='upregulated';
                	}
                	else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='downregulated';
                	}
                	if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                	/*else{
                		$my_dict2->classes="neutral";
                	}*/
                	array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['three_hr']=$my_dict;



                $fc_gene=array();  
                $pv_gene=array();  
                $gene_cnt=1;
                foreach($final_genes as $gene){
                            
                   
                      
                    $temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,2);                
                    $fc_gene[$gene]=$temp->fold_change;                        
                    $pv_gene[$gene]=$temp->p_value;  
                    $gene_info[$gene]->three_fc=$temp->fold_change;           
                    $gene_info[$gene]->three_pv=$temp->p_value; 
                    $hm_temp=new stdClass();
                    $hm_temp->variable="Three hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ;
                    /*$txt = "2\t".$gene_cnt."\t".$temp->fold_change."\n";
                    fwrite($myfile,$txt);
                    $txt = "2\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);*/
                    $gene_cnt=$gene_cnt+1;
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='two';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='two';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);                     
                
                }

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
                $my_dict->name="Network view of query genes at 3hr time-point. Node color based on 2 fold-change";
                $my_dict2=new stdClass();
                $my_dict2->data=$my_dict;
                array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                    $my_dict=new stdClass();
                    $tissue_genes[$tissue]=array();
                    $my_dict->id=$tissue;
                    $my_dict->name=$tissue;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    //array_push($nodes,$my_dict2);
                }
                
                foreach($final_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                    array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                    $my_dict->id=$gene;
                    $my_dict->name=$gene;
                    //$my_dict->parent=$gene_info[$gene]->module_name;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                  $fc=$fc_gene[$gene];
                    $pv=$pv_gene[$gene];
                  $my_dict2->classes="";

                    if($fc>1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='upregulated';
                    }
                    else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='downregulated';
                    }
                    if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                    /*else{
                        $my_dict2->classes="neutral";
                    }*/
                    array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                    $my_dict=new stdClass();
                    $my_dict->source=$link->source;
                    $my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                    $my_dict->target=$link->destination;
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
                $my_dict->nodes = $nodes;
                $my_dict->edges=$links;
                
                $my_dict=json_encode($my_dict); 
                $data['neighbour_three_hr']=$my_dict;

                //$data['six']=$this->Gene->getAllStressGenesDup($genes,$tissue_id,$stress_id,3);
                //$fc_pv_data=array();
                $fc_gene=array();  
                $pv_gene=array();  
                $gene_cnt=1;
				foreach($genes as $gene){
		               		
                  
                      
                    $temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,3);                
                    $fc_gene[$gene]=$temp->fold_change;                        
                    $pv_gene[$gene]=$temp->p_value; 
                    $gene_info[$gene]->six_fc=$temp->fold_change;           
                    $gene_info[$gene]->six_pv=$temp->p_value; 
                    $hm_temp=new stdClass();   
                    $hm_temp->variable="six hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ;
                    
                    if(in_array($gene, $linked_genes_input)){
                        $txt = "3\t".$gene_cnt."\t".$temp->fold_change."\n";
                    fwrite($myfile,$txt);
                    }
                    if(in_array($gene, $linked_genes_input)){
                    $txt = "3\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);
                    $gene_cnt=$gene_cnt+1;               
                    }
                        
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='three';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='three';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);
                      
                    
                }
                
                
                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="Network view of query genes at 6hr time-point. Node color based on 2 fold-change";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes)){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                  $fc=$fc_gene[$gene];
                	$pv=$pv_gene[$gene];
                  $my_dict2->classes="";

                	if($fc>1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='upregulated';
                	}
                	else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='downregulated';
                	}
                	if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                	/*else{
                		$my_dict2->classes="neutral";
                	}*/
                	array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['six_hr']=$my_dict;

                $fc_gene=array();  
                $pv_gene=array();  
                $gene_cnt=1;
                foreach($final_genes as $gene){
                            
                  
                      
                    $temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,3);                
                    $fc_gene[$gene]=$temp->fold_change;                        
                    $pv_gene[$gene]=$temp->p_value; 
                    $gene_info[$gene]->six_fc=$temp->fold_change;           
                    $gene_info[$gene]->six_pv=$temp->p_value; 
                    $hm_temp=new stdClass();   
                    $hm_temp->variable="six hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ;
                    /*$txt = "3\t".$gene_cnt."\t".$temp->fold_change."\n";
                    fwrite($myfile,$txt);
                    $txt = "3\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);*/
                    $gene_cnt=$gene_cnt+1;                   
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='three';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='three';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);
                      
                    
                }
                
                
                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
                $my_dict->name="Network view of query genes at 6hr time-point. Node color based on 2 fold-change";
                $my_dict2=new stdClass();
                $my_dict2->data=$my_dict;
                array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                    $my_dict=new stdClass();
                    $tissue_genes[$tissue]=array();
                    $my_dict->id=$tissue;
                    $my_dict->name=$tissue;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    //array_push($nodes,$my_dict2);
                }
                
                foreach($final_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                    array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                    $my_dict->id=$gene;
                    $my_dict->name=$gene;
                    //$my_dict->parent=$gene_info[$gene]->module_name;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                  $fc=$fc_gene[$gene];
                    $pv=$pv_gene[$gene];
                  $my_dict2->classes="";

                    if($fc>1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='upregulated';
                    }
                    else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='downregulated';
                    }
                    if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                    /*else{
                        $my_dict2->classes="neutral";
                    }*/
                    array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                    $my_dict=new stdClass();
                    $my_dict->source=$link->source;
                    $my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                    $my_dict->target=$link->destination;
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
                $my_dict->nodes = $nodes;
                $my_dict->edges=$links;
                
                $my_dict=json_encode($my_dict); 
                $data['neighbour_six_hr']=$my_dict;

                //$data['twelve']=$this->Gene->getAllStressGenesDup($genes,$tissue_id,$stress_id,4);
                //$fc_pv_data=array();
                $fc_gene=array();  
                $pv_gene=array();  
                $gene_cnt=1;
				foreach($genes as $gene){
		               		                     
                    $temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,4);                
                    $fc_gene[$gene]=$temp->fold_change;                        
                    $pv_gene[$gene]=$temp->p_value;  
                    $gene_info[$gene]->twelve_fc=$temp->fold_change;           
                    $gene_info[$gene]->twelve_pv=$temp->p_value;
                    $hm_temp=new stdClass();
                    $hm_temp->variable="twelve hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ; 
                    
                    if(in_array($gene, $linked_genes_input)){
                        $txt = "4\t".$gene_cnt."\t".$temp->fold_change."\n";
                    fwrite($myfile,$txt);
                    }
                    if(in_array($gene, $linked_genes_input)){
                    $txt = "4\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);
                    $gene_cnt=$gene_cnt+1;
                    }
                    
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='four';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='four';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);                                       
                
                }

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="Network view of query genes at 12hr time-point. Node color based on 2 fold-change";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes)){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                  $fc=$fc_gene[$gene];
                	$pv=$pv_gene[$gene];
                  $my_dict2->classes="";

                	if($fc>1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='upregulated';
                	}
                	else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='downregulated';
                	}
                	if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                	/*else{
                		$my_dict2->classes="neutral";
                	}*/
                	array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['twelve_hr']=$my_dict;


                $fc_gene=array();  
                $pv_gene=array();  
                $gene_cnt=1;
                foreach($final_genes as $gene){
                                                 
                    $temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,4);                
                    $fc_gene[$gene]=$temp->fold_change;                        
                    $pv_gene[$gene]=$temp->p_value;  
                    $gene_info[$gene]->twelve_fc=$temp->fold_change;           
                    $gene_info[$gene]->twelve_pv=$temp->p_value;
                    $hm_temp=new stdClass();
                    $hm_temp->variable="twelve hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ; 
                    /*$txt = "4\t".$gene_cnt."\t".$temp->fold_change."\n";
                    fwrite($myfile,$txt);
                    $txt = "4\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);*/
                    $gene_cnt=$gene_cnt+1;
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='four';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='four';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);                                       
                
                }

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
                $my_dict->name="Network view of query genes at 12hr time-point. Node color based on 2 fold-change";
                $my_dict2=new stdClass();
                $my_dict2->data=$my_dict;
                array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                    $my_dict=new stdClass();
                    $tissue_genes[$tissue]=array();
                    $my_dict->id=$tissue;
                    $my_dict->name=$tissue;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    //array_push($nodes,$my_dict2);
                }
                
                foreach($final_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                    array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                    $my_dict->id=$gene;
                    $my_dict->name=$gene;
                    //$my_dict->parent=$gene_info[$gene]->module_name;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                  $fc=$fc_gene[$gene];
                    $pv=$pv_gene[$gene];
                  $my_dict2->classes="";

                    if($fc>1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='upregulated';
                    }
                    else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='downregulated';
                    }
                    if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                    /*else{
                        $my_dict2->classes="neutral";
                    }*/
                    array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                    $my_dict=new stdClass();
                    $my_dict->source=$link->source;
                    $my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                    $my_dict->target=$link->destination;
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
                $my_dict->nodes = $nodes;
                $my_dict->edges=$links;
                
                $my_dict=json_encode($my_dict); 
                $data['neighbour_twelve_hr']=$my_dict;

                //$data['twentyfour']=$this->Gene->getAllStressGenesDup($genes,$tissue_id,$stress_id,5);
                if($stress_id==6){
                  $data['twentyfour']=$data['twelve'];
                }
                //$fc_pv_data=array();
                $fc_gene=array();  
                $pv_gene=array();  
                $gene_cnt=1;
				foreach($genes as $gene){
		               	
                      
                    $temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,5);                
                    $fc_gene[$gene]=$temp->fold_change;                        
                    $pv_gene[$gene]=$temp->p_value;  
                    $gene_info[$gene]->twentyfour_fc=$temp->fold_change;           
                    $gene_info[$gene]->twentyfour_pv=$temp->p_value; 
                    $hm_temp=new stdClass(); 
                    $hm_temp->variable="twenty-four hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ;
                    
                    if(in_array($gene, $linked_genes_input)){
                        $txt = "5\t".$gene_cnt."\t".$temp->fold_change."\n";
                    fwrite($myfile,$txt);
                    }
                    if(in_array($gene, $linked_genes_input)){
                    $txt = "5\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);
                    $gene_cnt=$gene_cnt+1;
                    }
                    
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='five';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='five';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);                    
                    
         
                }

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
            	$my_dict->name="Network view of query genes at 24hr time-point. Node color based on 2 fold-change";
            	$my_dict2=new stdClass();
            	$my_dict2->data=$my_dict;
            	array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                	$my_dict=new stdClass();
                	$tissue_genes[$tissue]=array();
                	$my_dict->id=$tissue;
                	$my_dict->name=$tissue;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	//array_push($nodes,$my_dict2);
                }
                
                foreach($genes as $gene){
                  if(in_array($gene, $linked_genes)){
                	array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                	$my_dict->id=$gene;
                	$my_dict->name=$gene;
                	//$my_dict->parent=$gene_info[$gene]->module_name;
                	$my_dict->parent='cy';
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                  $fc=$fc_gene[$gene];
                	$pv=$pv_gene[$gene];
                  $my_dict2->classes="";

                	if($fc>1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='upregulated';
                	}
                	else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                		$my_dict2->classes='downregulated';
                	}
                	if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                	/*else{
                		$my_dict2->classes="neutral";
                	}*/
                	array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                	$my_dict=new stdClass();
                	$my_dict->source=$link->source;
                	$my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                	$my_dict->target=$link->destination;
                	$my_dict2=new stdClass();
                	$my_dict2->data=$my_dict;
                	array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
				$my_dict->nodes = $nodes;
				$my_dict->edges=$links;
				
                $my_dict=json_encode($my_dict); 
                $data['twentyfour_hr']=$my_dict;


                $fc_gene=array();  
                $pv_gene=array();  
                $gene_cnt=1;
                foreach($final_genes as $gene){
                        
                      
                    $temp=$this->Gene->getAllStressGenes($gene,$tissue_id,$stress_id,5);                
                    $fc_gene[$gene]=$temp->fold_change;                        
                    $pv_gene[$gene]=$temp->p_value;  
                    $gene_info[$gene]->twentyfour_fc=$temp->fold_change;           
                    $gene_info[$gene]->twentyfour_pv=$temp->p_value; 
                    $hm_temp=new stdClass(); 
                    $hm_temp->variable="twenty-four hr";
                    $hm_temp->group=$gene;
                    $hm_temp->value=$temp->fold_change;  
                    array_push($heat_map_data, $hm_temp) ;
                    /*$txt = "5\t".$gene_cnt."\t".$temp->fold_change."\n";
                    fwrite($myfile,$txt);
                    $txt = "5\t".$gene_cnt."\t".$temp->p_value."\n";
                    fwrite($myfile2,$txt);*/
                    $gene_cnt=$gene_cnt+1;
                    $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='five';
                            $my_dict->fc=$temp->fold_change;
                            array_push($fc_pv_data,$my_dict);
                            $my_dict=new stdClass();
                            $my_dict->node=$gene;
                            $my_dict->time='five';
                            $my_dict->pv=$temp->p_value;
                            array_push($fc_pv_data,$my_dict);                    
                    
         
                }

                $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
                $my_dict->name="Network view of query genes at 24hr time-point. Node color based on 2 fold-change";
                $my_dict2=new stdClass();
                $my_dict2->data=$my_dict;
                array_push($nodes,$my_dict2);
                $tissue_genes=array();
                foreach(array_keys($tissues) as $tissue){
                    $my_dict=new stdClass();
                    $tissue_genes[$tissue]=array();
                    $my_dict->id=$tissue;
                    $my_dict->name=$tissue;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    //array_push($nodes,$my_dict2);
                }
                
                foreach($final_genes as $gene){
                  if(in_array($gene, $linked_genes)){
                    array_push($tissue_genes[$gene_info[$gene]->module_name],$gene);
                    $my_dict=new stdClass();
                    $my_dict->id=$gene;
                    $my_dict->name=$gene;
                    //$my_dict->parent=$gene_info[$gene]->module_name;
                    $my_dict->parent='cy';
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                  $fc=$fc_gene[$gene];
                    $pv=$pv_gene[$gene];
                  $my_dict2->classes="";

                    if($fc>1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='upregulated';
                    }
                    else if($fc<-1 && $pv<0.05 && $pv!=0.000){
                        $my_dict2->classes='downregulated';
                    }
                    if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                    /*else{
                        $my_dict2->classes="neutral";
                    }*/
                    array_push($nodes,$my_dict2);
                $gene_info[$gene]->connected="Connected. Show in the Network.";
                  }
                  else{
                    $gene_info[$gene]->connected="This Gene does not show any interaction in top 100 HRR.";
                  }
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($response as $link){
                    $my_dict=new stdClass();
                    $my_dict->source=$link->source;
                    $my_dict->name=$link->correlation_coefficient;
                  $my_dict->name=round($my_dict->name, 2);
                    $my_dict->target=$link->destination;
                    $my_dict2=new stdClass();
                    $my_dict2->data=$my_dict;
                    array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
                $my_dict->nodes = $nodes;
                $my_dict->edges=$links;
                
                $my_dict=json_encode($my_dict); 
                $data['neighbour_twentyfour_hr']=$my_dict;


                /*$fc_pv_data=array();
				foreach($genes as $gene){
		               		
		                    foreach($data['one'] as $o){

		                      if($o->os_id==$gene){
		                      	$my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='one';
		                      	$my_dict->fc=$o->fold_change;
		                      	array_push($fc_pv_data,$my_dict);
		                      	$my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='one';
		                      	$my_dict->pv=$o->p_value;
		                      	array_push($fc_pv_data,$my_dict);
		                        break;
		                      }
		                    }
		                    foreach($data['three'] as $o){

				      if($o->os_id==$gene){
				      			$my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='three';
		                      	$my_dict->fc=$o->fold_change;
		                      	array_push($fc_pv_data,$my_dict);
		                      	$my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='three';
		                      	$my_dict->pv=$o->p_value;
		                      	array_push($fc_pv_data,$my_dict);
		                        break;
		                      }
		                    }
		                    foreach($data['six'] as $o){

		                      if($o->os_id==$gene){
		                        $my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='six';
		                      	$my_dict->fc=$o->fold_change;
		                      	array_push($fc_pv_data,$my_dict);
		                      	$my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='six';
		                      	$my_dict->pv=$o->p_value;
		                      	array_push($fc_pv_data,$my_dict);
		                        break;
		                      }
		                    }
		                    foreach($data['twelve'] as $o){

		                      if($o->os_id==$gene){
		                        $my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='twelve';
		                      	$my_dict->fc=$o->fold_change;
		                      	array_push($fc_pv_data,$my_dict);
		                      	$my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='twelve';
		                      	$my_dict->pv=$o->p_value;
		                      	array_push($fc_pv_data,$my_dict);
		                        break;
		                      }
		                    }
		                    foreach($data['twentyfour'] as $o){

		                      if($o->os_id==$gene){
		                        $my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='twentyfour';
		                      	$my_dict->fc=$o->fold_change;
		                      	array_push($fc_pv_data,$my_dict);
		                      	$my_dict=new stdClass();
		                      	$my_dict->node=$gene;
		                      	$my_dict->time='twentyfour';
		                      	$my_dict->pv=$o->p_value;
		                      	array_push($fc_pv_data,$my_dict);
		                        break;
		                      }
		                    }
		                  
				  }*/
				  //print_r($fc_pv_data);
				  $genes1=array();
				  $fc=array();
				  $pv=array();
				  $temp=array();
				  $temp2=array();
				  $cnt=0;
				  foreach($fc_pv_data as $gene){
				  	$cnt=$cnt+1;
				  	if($cnt%10==1){
				  		array_push($genes1,$gene->node);	
				  	}
				  	if($cnt%2!=0){
				  		array_push($temp,$gene->fc);
				  	}
				  	else{
				  		array_push($temp2,$gene->pv);
				  	}
				  	if($cnt%10==0){
				  		array_push($fc,$temp);
				  		array_push($pv,$temp2);
				  		$temp=array();
				  		$temp2=array();
				  	}	
				  }
				  //print_r($fc);
				  //die();
          $rmg=array();
          
          foreach($module_names as $module){
              $root_module_genes = $this->Gene->getAllRootModuleGenes($module->module_id,$tissue_id);

              $root_module_go = $this->Gene->getRootModuleGo($module->module_id,$tissue_id);

              $gene_module_degree = $this->Gene->getRootClusterDegree($module->module_id,$tissue_id);
              $rmg[$module->module_id]=$root_module_go;
              $gmd[$module->module_id]=$gene_module_degree;
              $uni_genes=array();
              foreach($root_module_genes as $m_genes){
                $uni_genes[$m_genes->source]=1;
                $uni_genes[$m_genes->target]=1;
              }
              $uni_genes = array_keys($uni_genes);
              $nodes = array();
                $my_dict=new stdClass();
                $my_dict->id='cy';
              $my_dict->name='Top 100 high-degree genes shown of '.$module->module_name.' Module';
              $my_dict2=new stdClass();
              $my_dict2->data=$my_dict;
              array_push($nodes,$my_dict2);


              foreach($uni_genes as $gene){
                  
                    $my_dict=new stdClass();
                  $my_dict->id=$gene;
                  $my_dict->name=$gene;
                  //$my_dict->parent=$gene_info[$gene]->module_name;
                  $my_dict->parent='cy';
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  $my_dict2->classes=lcfirst($module->module_name);
                  if(in_array($gene, $tfs)){
                		$my_dict2->classes=$my_dict2->classes.' tfs';
                	}
                  array_push($nodes,$my_dict2);
                }
                
                
                //$main=new stdClass();
                $links = array();
                foreach($root_module_genes as $link){
                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $my_dict->name=$link->HRR;
                  $my_dict->target=$link->target;
                  $my_dict2=new stdClass();
                  $my_dict2->data=$my_dict;
                  array_push($links,$my_dict2);
                }
                
                $my_dict=new stdClass();
        $my_dict->nodes = $nodes;
        $my_dict->edges=$links;
        
                $my_dict=json_encode($my_dict); 
                
                
                $data[$module->module_name]=$my_dict;


              
          }
          
          $rmg=json_encode($rmg);

          $data['rmg']=$rmg;
          $gmd=json_encode($gmd);
          $data['gmd']=$gmd;
         
          $links = array();
                foreach($response as $link){

                  if(in_array($link->source,$linked_genes) and in_array($link->source, $genes) and in_array($link->destination,$linked_genes) and in_array($link->destination,$genes)){  

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp=$link->source.'-'.$link->destination;
                  if($tissue_id==1){    
                      if(array_key_exists($temp, $Osmotic_root_dic)){
                        $my_dict->Opcc=round($Osmotic_root_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Opcc="NA";
                      }
                      if(array_key_exists($temp, $drought_root_dic)){
                        $my_dict->Dpcc=round($drought_root_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Dpcc="NA";
                      }
                      if(array_key_exists($temp, $cold_root_dic)){
                        $my_dict->Cpcc=round($cold_root_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Cpcc="NA";
                      }
                      if(array_key_exists($temp, $ABA_root_dic)){
                        $my_dict->Apcc=round($ABA_root_dic->$temp,2);
                      }
                      else{
                        $my_dict->Apcc="NA";
                      }
                      if(array_key_exists($temp, $JA_root_dic)){
                        $my_dict->Jpcc=round($JA_root_dic->$temp,2);
                      }
                      else{
                        $my_dict->Jpcc="NA";
                      }
                      if(array_key_exists($temp, $Flood_root_dic)){
                        $my_dict->Fpcc=round($Flood_root_dic->$temp,2);
                      }
                      else{
                        $my_dict->Fpcc="NA";
                      }
                  }
                  else{
                      if(array_key_exists($temp, $Osmotic_shoot_dic)){
                        $my_dict->Opcc=round($Osmotic_shoot_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Opcc="NA";
                      }
                      if(array_key_exists($temp, $drought_shoot_dic)){
                        $my_dict->Dpcc=round($drought_shoot_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Dpcc="NA";
                      }
                      if(array_key_exists($temp, $cold_shoot_dic)){
                        $my_dict->Cpcc=round($cold_shoot_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Cpcc="NA";
                      }
                      if(array_key_exists($temp, $ABA_shoot_dic)){
                        $my_dict->Apcc=round($ABA_shoot_dic->$temp,2);
                      }
                      else{
                        $my_dict->Apcc="NA";
                      }
                      if(array_key_exists($temp, $JA_shoot_dic)){
                        $my_dict->Jpcc=round($JA_shoot_dic->$temp,2);
                      }
                      else{
                        $my_dict->Jpcc="NA";
                      }
                      if(array_key_exists($temp, $Flood_shoot_dic)){
                        $my_dict->Fpcc=round($Flood_shoot_dic->$temp,2);
                      }
                      else{
                        $my_dict->Fpcc="NA";
                      }

                  }
                  $my_dict->pcc=$link->correlation_coefficient;
                  $my_dict->pcc=round($my_dict->pcc, 2);
                  $my_dict->hrr=$link->hrr;
                  $my_dict->target=$link->destination;
                  if(in_array($my_dict, $links)){
                    continue;
                  }
                  array_push($links,$my_dict);
              }
            }
                //$genes = array_unique($genes);
                //$links = array_unique($links);
                $data['links']=$links;


            $links2 = array();
                foreach($response as $link){

                  if(in_array($link->source,$linked_genes) and in_array($link->destination,$linked_genes) ){  

                  $my_dict=new stdClass();
                  $my_dict->source=$link->source;
                  $temp=$link->source.'-'.$link->destination;
                  if($tissue_id==1){    
                      if(array_key_exists($temp, $Osmotic_root_dic)){
                        $my_dict->Opcc=round($Osmotic_root_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Opcc="NA";
                      }
                      if(array_key_exists($temp, $drought_root_dic)){
                        $my_dict->Dpcc=round($drought_root_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Dpcc="NA";
                      }
                      if(array_key_exists($temp, $cold_root_dic)){
                        $my_dict->Cpcc=round($cold_root_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Cpcc="NA";
                      }
                      if(array_key_exists($temp, $ABA_root_dic)){
                        $my_dict->Apcc=round($ABA_root_dic->$temp,2);
                      }
                      else{
                        $my_dict->Apcc="NA";
                      }
                      if(array_key_exists($temp, $JA_root_dic)){
                        $my_dict->Jpcc=round($JA_root_dic->$temp,2);
                      }
                      else{
                        $my_dict->Jpcc="NA";
                      }
                      if(array_key_exists($temp, $Flood_root_dic)){
                        $my_dict->Fpcc=round($Flood_root_dic->$temp,2);
                      }
                      else{
                        $my_dict->Fpcc="NA";
                      }
                  }
                  else{
                      if(array_key_exists($temp, $Osmotic_shoot_dic)){
                        $my_dict->Opcc=round($Osmotic_shoot_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Opcc="NA";
                      }
                      if(array_key_exists($temp, $drought_shoot_dic)){
                        $my_dict->Dpcc=round($drought_shoot_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Dpcc="NA";
                      }
                      if(array_key_exists($temp, $cold_shoot_dic)){
                        $my_dict->Cpcc=round($cold_shoot_dic->$temp, 2);
                      }
                      else{
                        $my_dict->Cpcc="NA";
                      }
                      if(array_key_exists($temp, $ABA_shoot_dic)){
                        $my_dict->Apcc=round($ABA_shoot_dic->$temp,2);
                      }
                      else{
                        $my_dict->Apcc="NA";
                      }
                      if(array_key_exists($temp, $JA_shoot_dic)){
                        $my_dict->Jpcc=round($JA_shoot_dic->$temp,2);
                      }
                      else{
                        $my_dict->Jpcc="NA";
                      }
                      if(array_key_exists($temp, $Flood_shoot_dic)){
                        $my_dict->Fpcc=round($Flood_shoot_dic->$temp,2);
                      }
                      else{
                        $my_dict->Fpcc="NA";
                      }

                  }
                  $my_dict->pcc=$link->correlation_coefficient;
                  $my_dict->pcc=round($my_dict->pcc, 2);
                  $my_dict->hrr=$link->hrr;
                  $my_dict->target=$link->destination;
                  if(in_array($my_dict, $links2)){
                    continue;
                  }
                  array_push($links2,$my_dict);
              }
            }    
                $data['links2']=$links2;

               
				  $data['fc_pv_data']=$fc_pv_data;

                $data['gene_info']=$gene_info;

                $data['tissue_gene']=$tissue_genes;
                $data['tissue']=$tissue_id;
                $data['stress']=$stress_id;
                $data['genes']=$genes;
                $heat_map_data = json_encode($heat_map_data);

                $data['heat_map_data']=$heat_map_data;
                
                $this->load->view('templates/header');
                $this->load->view('result',$data);                
                $this->load->view('templates/footer');
        }



}

?>
